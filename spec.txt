bbq - data cooking in ruby
----------------------------

Goals
------
Define data definition files in a ruby dsl.
Ability to marshal data from ruby into a binary blob.
Ability to generate c++ code to unmarshal the binary blob into an in-memory structure.
Fast unmarshaling code on the c++ side.  Should just be a cast & pointer fixup.
Support for basic types: ints, floats.
Support for heirarchical types: structs & pointers.
Cooker should also be able to generate text format of cooked data.

Example
--------
Level files for iphone game are defined in a .dd file.  Ruby DSL
Each levels data for iphone game is in a .di file.  Ruby DSL
bbq-cook can take a .di & a .dd and generate a binary blob (and an optional text file)
bbq-burn can take a .dd file and generate c++ code that can read in a cooked blob file.

level.dd + horsey-level.di  => bbq-cook  => binary blob
level.dd                    => bbq-burn  => c++ code


Example: level.dd
----------------------------

require 'levelmeta'

struct level {
	   string name default => "unknown"
	   matrix uv_matrix default => identity
	   int num_layers default => 2
	   int n
	   int k
	   array flavor flavors
	   bool square_texture_hack
	   color clear_color
}

struct matrix {
		array 16 float elems
}

enum flavor_enum {
		red, green, blue
}

struct flavor {
	   enum flavor_enum flavor
	   string filename
	   color vert_color
}

struct color {
	   float r
	   float g
	   float b
	   float a
}

Example: horsey-level.di
----------------------------

require 'level.dd'

f_array = [Flavor.new(:red, "red-horsey.png", [0,1,1,0.5]),
		   Flavor.new(:green, "green-horsey.png", [1,1,1,1])]
		   
level = Level.new {
	  name => "horsey"
      uv_matrix => Xform[:trans [2,2,2]]
	  n => 3
	  k => 7
	  flavors => f_array
	  clear_color => [0.3, 0.3, 0.0]
}


Exmaple c++ header
---------------------
struct Color
{
		float r;
		float g;
		flaot b;
		float a;
};

struct Level
{
		char* name;
		Matrix uv_mat;
		int n;
		int k;
		Flavor* flavors;
		int num_flavors;
		Color color;
};

Level* LoadLevel(const char* filename);

	  
	  
	  
