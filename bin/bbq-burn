#!/usr/bin/ruby

#
# bbq-burn - generates a header from a .dd file
#
#  usage:
#      bbq-burn [-n NAMESPACE] input.dd output.h
#

require 'bbq'
require 'optparse'

# parse cmdline args
options = {}
opts = OptionParser.new do |opts|
  opts.banner = "bbq-burn : Generate a header file from a dd file.\n\tUsage: bbq-burn [options] dd_file h_file"

  opts.on('-n', '--namespace NAMESPACE', 'Enclose header in a C++ namespace') do |namespace|
    options[:namespace] = namespace
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end

end
opts.parse!(ARGV)

if ARGV.size != 2
  puts opts
  exit
end

dd_file, h_file = ARGV

# load the dd definition
load dd_file

# output the header
File.open(h_file, "w") do |f|

  # output header guard
  symbol = "#{File.basename(h_file,'.h').upcase}_H"
  f.puts "#ifndef #{symbol}"
  f.puts "#define #{symbol}"
  f.puts ""

  # namespace
  if options[:namespace]
    f.puts "namespace #{options[:namespace]} {"
  end

  # collect all the types defined in this file
  types = []
  TypeRegistry.each_type_from(File.basename(dd_file)) do |type|
    types.push type
  end

  # sort them in the order they were defined in
  types.sort! {|a,b| a.index <=> b.index}

  # generate each type declaration
  types.each do |type|
    f.print type.declare
  end

  # close the namespace
  if options[:namespace]
    f.puts '}'
  end

  # close the header guard
  f.puts ""
  f.puts "#endif"

end
